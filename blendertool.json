{
    "blender_api_version_target": "4.0+",
    "commands": [
      {
        "tool_name": "scene_new",
        "description": "Create a new scene.",
        "category": "bpy.data.scenes",
        "handler_type": "function_call",
        "blender_path": "bpy.data.scenes.new",
        "parameters": [
          { "name": "name", "type": "str", "description": "Name for the new scene.", "required": true }
        ],
        "returns": { "type": "str", "blender_type": "bpy.types.Scene (name)", "description": "Name of the new scene." }
      },
      {
        "tool_name": "scene_set_current",
        "description": "Set the current active scene in the window context.",
        "category": "bpy.context.window",
        "handler_type": "property_set",
        "blender_object_type": "bpy.context.window",
        "blender_property_name": "scene",
        "parameters": [
          { "name": "scene_name", "type": "str", "blender_type": "bpy.types.Scene (name)", "description": "Name of the scene to set as current.", "required": true }
        ],
        "returns": { "type": "None", "description": "None." },
        "notes": "Handler needs to fetch bpy.data.scenes[scene_name] first."
      },
      {
        "tool_name": "scene_set_render_engine",
        "description": "Set the render engine for the current scene.",
        "category": "bpy.types.Scene.render",
        "handler_type": "property_set",
        "blender_object_type": "bpy.context.scene.render",
        "blender_property_name": "engine",
        "parameters": [
          { "name": "engine", "type": "str", "enum": ["CYCLES", "EEVEE", "BLENDER_WORKBENCH"], "description": "Render engine to use.", "required": true }
        ],
        "returns": { "type": "None", "description": "None."}
      },
      {
        "tool_name": "scene_set_render_resolution",
        "description": "Set render resolution and percentage scale for the current scene.",
        "category": "bpy.types.Scene.render",
        "handler_type": "custom_blender_function",
        "blender_function_notes": "Sets bpy.context.scene.render.resolution_x, resolution_y, and resolution_percentage.",
        "parameters": [
          { "name": "resolution_x", "type": "int", "description": "Width in pixels.", "required": true },
          { "name": "resolution_y", "type": "int", "description": "Height in pixels.", "required": true },
          { "name": "percentage", "type": "int", "description": "Resolution percentage scale.", "required": false, "default": 100 }
        ],
        "returns": { "type": "None", "description": "None."}
      },
      {
        "tool_name": "scene_set_render_output_path",
        "description": "Set the file path for rendering output.",
        "category": "bpy.types.Scene.render",
        "handler_type": "property_set",
        "blender_object_type": "bpy.context.scene.render",
        "blender_property_name": "filepath",
        "parameters": [
          { "name": "path", "type": "str", "description": "Output path. Use // for relative to blend file.", "required": true }
        ],
        "returns": { "type": "None", "description": "None."}
      },
      {
        "tool_name": "scene_set_render_image_format",
        "description": "Set the image format for rendering output.",
        "category": "bpy.types.Scene.render.image_settings",
        "handler_type": "property_set",
        "blender_object_type": "bpy.context.scene.render.image_settings",
        "blender_property_name": "file_format",
        "parameters": [
          { "name": "format", "type": "str", "enum": ["PNG", "JPEG", "OPEN_EXR", "TIFF", "BMP", "OPEN_EXR_MULTILAYER"], "description": "Image file format.", "required": true }
        ],
        "returns": { "type": "None", "description": "None."}
      },
      {
        "tool_name": "op_render_image",
        "description": "Render the current scene's active camera to an image.",
        "category": "bpy.ops.render",
        "handler_type": "operator_call",
        "blender_operator_path": "bpy.ops.render.render",
        "parameters": [
          { "name": "write_still", "type": "bool", "description": "Write the rendered image to the output path.", "required": false, "default": true },
          { "name": "use_viewport", "type": "bool", "description": "Render from the viewport perspective instead of the active camera.", "required": false, "default": false }
        ],
        "returns": { "type": "dict", "description": "Operator status."}
      },
      {
        "tool_name": "op_mesh_add_cube",
        "description": "Add a cube mesh object to the scene.",
        "category": "bpy.ops.mesh",
        "handler_type": "operator_call",
        "blender_operator_path": "bpy.ops.mesh.primitive_cube_add",
        "parameters": [
          { "name": "size", "type": "float", "description": "Cube size.", "required": false, "default": 2.0 },
          { "name": "location", "type": "list[float]", "length": 3, "description": "Location [x,y,z].", "required": false, "default": [0,0,0] },
          { "name": "rotation", "type": "list[float]", "length": 3, "description": "Rotation [x,y,z] in radians.", "required": false, "default": [0,0,0] },
          { "name": "scale", "type": "list[float]", "length": 3, "description": "Scale [x,y,z].", "required": false, "default": [1,1,1] }
        ],
        "returns": { "type": "dict", "description": "Operator status. The server should try to return the name of the created object." }
      },
      {
        "tool_name": "op_mesh_add_uv_sphere",
        "description": "Add a UV sphere mesh object.",
        "category": "bpy.ops.mesh",
        "handler_type": "operator_call",
        "blender_operator_path": "bpy.ops.mesh.primitive_uv_sphere_add",
        "parameters": [
          { "name": "segments", "type": "int", "description": "Number of segments.", "required": false, "default": 32 },
          { "name": "ring_count", "type": "int", "description": "Number of rings.", "required": false, "default": 16 },
          { "name": "radius", "type": "float", "description": "Sphere radius.", "required": false, "default": 1.0 },
          { "name": "location", "type": "list[float]", "length": 3, "description": "Location [x,y,z].", "required": false, "default": [0,0,0] }
        ],
        "returns": { "type": "dict", "description": "Operator status. Server should try to return created object name." }
      },
      {
        "tool_name": "op_mesh_add_cylinder",
        "description": "Add a cylinder mesh object.",
        "category": "bpy.ops.mesh",
        "handler_type": "operator_call",
        "blender_operator_path": "bpy.ops.mesh.primitive_cylinder_add",
        "parameters": [
          { "name": "vertices", "type": "int", "description": "Number of vertices in the base.", "required": false, "default": 32 },
          { "name": "radius", "type": "float", "description": "Cylinder radius.", "required": false, "default": 1.0 },
          { "name": "depth", "type": "float", "description": "Cylinder height.", "required": false, "default": 2.0 },
          { "name": "location", "type": "list[float]", "length": 3, "description": "Location [x,y,z].", "required": false, "default": [0,0,0] }
        ],
        "returns": { "type": "dict", "description": "Operator status. Server should try to return created object name." }
      },
      {
        "tool_name": "op_mesh_add_plane",
        "description": "Add a plane mesh object.",
        "category": "bpy.ops.mesh",
        "handler_type": "operator_call",
        "blender_operator_path": "bpy.ops.mesh.primitive_plane_add",
        "parameters": [
          { "name": "size", "type": "float", "description": "Plane size.", "required": false, "default": 2.0 },
          { "name": "location", "type": "list[float]", "length": 3, "description": "Location [x,y,z].", "required": false, "default": [0,0,0] }
        ],
        "returns": { "type": "dict", "description": "Operator status. Server should try to return created object name." }
      },
      {
        "tool_name": "object_set_location",
        "description": "Set the location of an object.",
        "category": "bpy.types.Object.properties",
        "handler_type": "property_set",
        "blender_object_type": "bpy.types.Object",
        "blender_property_name": "location",
        "parameters": [
          { "name": "object_name", "type": "str", "description": "Name of the object.", "required": true },
          { "name": "value", "type": "list[float]", "length": 3, "description": "New location [x,y,z].", "required": true }
        ],
        "returns": { "type": "None", "description": "None." }
      },
      {
        "tool_name": "object_set_rotation_euler",
        "description": "Set the Euler rotation of an object.",
        "category": "bpy.types.Object.properties",
        "handler_type": "property_set",
        "blender_object_type": "bpy.types.Object",
        "blender_property_name": "rotation_euler",
        "parameters": [
          { "name": "object_name", "type": "str", "description": "Name of the object.", "required": true },
          { "name": "value", "type": "list[float]", "length": 3, "description": "New rotation [x,y,z] in radians.", "required": true }
        ],
        "returns": { "type": "None", "description": "None." }
      },
      {
        "tool_name": "object_set_scale",
        "description": "Set the scale of an object.",
        "category": "bpy.types.Object.properties",
        "handler_type": "property_set",
        "blender_object_type": "bpy.types.Object",
        "blender_property_name": "scale",
        "parameters": [
          { "name": "object_name", "type": "str", "description": "Name of the object.", "required": true },
          { "name": "value", "type": "list[float]", "length": 3, "description": "New scale [x,y,z].", "required": true }
        ],
        "returns": { "type": "None", "description": "None." }
      },
      {
        "tool_name": "object_delete",
        "description": "Deletes specified objects from the scene and Blender data.",
        "category": "bpy.data.objects",
        "handler_type": "custom_blender_function",
        "blender_function_notes": "Deselects all, selects objects by name, then bpy.ops.object.delete(use_global=False, confirm=False).",
        "parameters": [
          { "name": "object_names", "type": "list[str]", "description": "List of names of objects to delete.", "required": true }
        ],
        "returns": { "type": "None", "description": "None if successful." }
      },
  

      {
        "tool_name": "context_set_object_mode",
        "description": "Set the mode of the specified object (e.g., OBJECT, EDIT, SCULPT).",
        "category": "bpy.ops.object",
        "handler_type": "custom_blender_function",
        "blender_function_notes": "Makes the object active if specified, then calls bpy.ops.object.mode_set(mode=...).",
        "parameters": [
          { "name": "object_name", "type": "str", "description": "Name of the object to set mode for. If null, uses current active object.", "required": false, "default": null },
          { "name": "mode", "type": "str", "enum": ["OBJECT", "EDIT", "SCULPT", "VERTEX_PAINT", "WEIGHT_PAINT", "TEXTURE_PAINT"], "description": "Mode to switch to.", "required": true }
        ],
        "returns": { "type": "None", "description": "None."},
        "notes": "Ensure the object is suitable for the target mode (e.g., must be a mesh for Edit/Sculpt mode)."
      },
      {
        "tool_name": "op_mesh_select_all_in_edit_mode",
        "description": "Select or deselect all geometry in Edit Mode for the active object.",
        "category": "bpy.ops.mesh",
        "handler_type": "operator_call",
        "blender_operator_path": "bpy.ops.mesh.select_all",
        "parameters": [
          { "name": "action", "type": "str", "enum": ["TOGGLE", "SELECT", "DESELECT", "INVERT"], "description": "Action to perform.", "required": false, "default": "TOGGLE" }
        ],
        "returns": { "type": "dict", "description": "Operator status."},
        "notes": "Requires active object to be in Edit Mode."
      },
      {
        "tool_name": "op_mesh_subdivide_edit_mode",
        "description": "Subdivide selected geometry in Edit Mode.",
        "category": "bpy.ops.mesh",
        "handler_type": "operator_call",
        "blender_operator_path": "bpy.ops.mesh.subdivide",
        "parameters": [
          { "name": "number_cuts", "type": "int", "description": "Number of cuts.", "required": false, "default": 1 },
          { "name": "smoothness", "type": "float", "description": "Smoothness factor (0-1).", "required": false, "default": 0.0 }
        ],
        "returns": { "type": "dict", "description": "Operator status."},
        "notes": "Requires active object in Edit Mode with some geometry selected."
      },
      {
        "tool_name": "op_mesh_extrude_region_move",
        "description": "Extrude selected region (vertices, edges, or faces) and move it.",
        "category": "bpy.ops.mesh",
        "handler_type": "operator_call",
        "blender_operator_path": "bpy.ops.mesh.extrude_region_move",
        "parameters": [
          { "name": "transform_kwargs", "type": "dict", "description": "Dictionary of keyword arguments for the internal transform operator (e.g., {'value': [0,0,1]} to extrude 1 unit along Z).", "required": false, "default": {}}
        ],
        "returns": { "type": "dict", "description": "Operator status."},
        "notes": "Requires active object in Edit Mode with a region selected. The 'transform_kwargs' are passed to the bpy.ops.transform.* operator that is part of extrude_region_move."
      },
      {
        "tool_name": "op_mesh_inset_faces",
        "description": "Inset selected faces in Edit Mode.",
        "category": "bpy.ops.mesh",
        "handler_type": "operator_call",
        "blender_operator_path": "bpy.ops.mesh.inset",
        "parameters": [
          { "name": "thickness", "type": "float", "description": "Inset thickness.", "required": false, "default": 0.1 },
          { "name": "depth", "type": "float", "description": "Depth of inset (relative to thickness).", "required": false, "default": 0.0 },
          { "name": "use_boundary", "type": "bool", "description": "Inset boundary edges.", "required": false, "default": true}
        ],
        "returns": { "type": "dict", "description": "Operator status."},
        "notes": "Requires active object in Edit Mode with faces selected."
      },
      {
        "tool_name": "bmesh_create_custom_mesh_from_verts_edges_faces",
        "description": "Create a new mesh object using BMesh from provided vertex, edge, and face data.",
        "category": "bmesh",
        "handler_type": "custom_blender_function",
        "blender_function_notes": "Uses bmesh to construct mesh: bm.verts.new(), bm.edges.new(), bm.faces.new(), then links to scene.",
        "parameters": [
          { "name": "object_name", "type": "str", "description": "Name for the new object.", "required": true },
          { "name": "verts", "type": "list[list[float]]", "description": "List of vertex coordinates, e.g., [[x,y,z], ...].", "required": true },
          { "name": "edges", "type": "list[list[int]]", "description": "List of edge vertex indices, e.g., [[0,1], [1,2], ...].", "required": false, "default": [] },
          { "name": "faces", "type": "list[list[int]]", "description": "List of face vertex indices, e.g., [[0,1,2,3], ...].", "required": false, "default": [] },
          { "name": "location", "type": "list[float]", "length": 3, "description": "Object location.", "required": false, "default": [0,0,0] }
        ],
        "returns": { "type": "str", "blender_type": "bpy.types.Object (name)", "description": "Name of the created object." }
      },
      {
        "tool_name": "object_add_subdivision_surface_modifier",
        "description": "Add a Subdivision Surface modifier to an object.",
        "category": "bpy.types.Object.modifiers",
        "handler_type": "custom_blender_function",
        "blender_function_notes": "obj.modifiers.new(name='Subdivision', type='SUBSURF'). Sets levels.",
        "parameters": [
          { "name": "object_name", "type": "str", "description": "Name of the object.", "required": true },
          { "name": "levels", "type": "int", "description": "Viewport subdivision levels.", "required": false, "default": 1 },
          { "name": "render_levels", "type": "int", "description": "Render subdivision levels.", "required": false, "default": 2 },
          { "name": "quality", "type": "int", "description": "Quality of subdivision (1-6).", "required": false, "default": 3 },
          { "name": "uv_smooth", "type": "str", "enum": ["NONE", "PRESERVE_CORNERS", "ALL"], "description": "How to handle UVs during subdivision.", "required": false, "default": "PRESERVE_CORNERS"}
        ],
        "returns": { "type": "str", "description": "Name of the added modifier." }
      },
      {
        "tool_name": "object_shade_smooth_operator",
        "description": "Set object's shading to smooth using the operator.",
        "category": "bpy.ops.object",
        "handler_type": "custom_blender_function",
        "blender_function_notes": "Deselects all, selects object, then bpy.ops.object.shade_smooth().",
        "parameters": [
          { "name": "object_name", "type": "str", "description": "Name of the object to shade smooth.", "required": true }
        ],
        "returns": { "type": "None", "description": "None."}
      },
      {
        "tool_name": "object_shade_flat_operator",
        "description": "Set object's shading to flat using the operator.",
        "category": "bpy.ops.object",
        "handler_type": "custom_blender_function",
        "blender_function_notes": "Deselects all, selects object, then bpy.ops.object.shade_flat().",
        "parameters": [
          { "name": "object_name", "type": "str", "description": "Name of the object to shade flat.", "required": true }
        ],
        "returns": { "type": "None", "description": "None."}
      },
  
  
      
      {
        "tool_name": "op_sculpt_dynamic_topology_toggle",
        "description": "Toggle dynamic topology sculpting for the active sculpt object.",
        "category": "bpy.ops.sculpt",
        "handler_type": "operator_call",
        "blender_operator_path": "bpy.ops.sculpt.dynamic_topology_toggle",
        "parameters": [],
        "returns": { "type": "dict", "description": "Operator status."},
        "notes": "Requires active object in Sculpt Mode."
      },
      {
        "tool_name": "sculpt_set_brush_settings",
        "description": "Set properties for the active sculpt brush (e.g., size, strength).",
        "category": "bpy.context.tool_settings.sculpt.brush",
        "handler_type": "custom_blender_function",
        "blender_function_notes": "Accesses bpy.context.tool_settings.sculpt.brush properties like .size, .strength. Specific brush might need to be active.",
        "parameters": [
          { "name": "brush_name", "type": "str", "description": "Optional: name of brush to ensure is active (e.g., 'SculptDraw'). If null, uses current brush.", "required": false, "default": null},
          { "name": "size", "type": "int", "description": "Brush radius in pixels.", "required": false },
          { "name": "strength", "type": "float", "description": "Brush strength (0-1).", "required": false },
          { "name": "auto_smooth_factor", "type": "float", "description": "Auto-smooth factor (0-1 for some brushes).", "required": false }
        ],
        "returns": { "type": "None", "description": "None." },
        "notes": "Requires Sculpt Mode. Some settings are brush-specific."
      },
  
      
      {
        "tool_name": "mesh_uv_layers_new",
        "description": "Add a new UV map layer to a mesh object.",
        "category": "bpy.types.Mesh.uv_layers",
        "handler_type": "custom_blender_function",
        "blender_function_notes": "Gets mesh from object_name, then mesh.uv_layers.new(name=uv_map_name).", 
        "parameters": [
          { "name": "object_name", "type": "str", "description": "Name of the mesh object.", "required": true },
          { "name": "uv_map_name", "type": "str", "description": "Name for the new UV map.", "required": false, "default": "UVMap" }
        ],
        "returns": { "type": "str", "description": "Name of the created UV map."}
      },
      {
        "tool_name": "mesh_uv_layer_set_active",
        "description": "Set the active UV map for rendering and editing for a mesh object.",
        "category": "bpy.types.Mesh.uv_layers",
        "handler_type": "custom_blender_function",
        "blender_function_notes": "Gets mesh, finds UV layer by name, sets mesh.uv_layers.active_index to the layer's index.",
        "parameters": [
          { "name": "object_name", "type": "str", "description": "Name of the mesh object.", "required": true },
          { "name": "uv_map_name", "type": "str", "description": "Name of the UV map to set active.", "required": true }
        ],
        "returns": { "type": "None", "description": "None."}
      },
      {
        "tool_name": "op_uv_unwrap_smart_project",
        "description": "Perform Smart UV Project on selected faces of the active mesh object in Edit Mode.",
        "category": "bpy.ops.uv",
        "handler_type": "operator_call",
        "blender_operator_path": "bpy.ops.uv.smart_project",
        "parameters": [
          { "name": "angle_limit", "type": "float", "description": "Angle limit for projection (radians).", "required": false, "default": 1.15192 },
          { "name": "island_margin", "type": "float", "description": "Margin between UV islands (0-1).", "required": false, "default": 0.003 },
          { "name": "scale_to_bounds", "type": "bool", "description": "Scale islands to UV bounds.", "required": false, "default": false }
        ],
        "returns": { "type": "dict", "description": "Operator status."},
        "notes": "Requires active object in Edit Mode with faces selected."
      },
      {
        "tool_name": "op_uv_unwrap_basic",
        "description": "Perform a basic unwrap on selected faces based on seams.",
        "category": "bpy.ops.uv",
        "handler_type": "operator_call",
        "blender_operator_path": "bpy.ops.uv.unwrap",
        "parameters": [
          { "name": "method", "type": "str", "enum": ["ANGLE_BASED", "CONFORMAL"], "description": "Unwrapping method.", "required": false, "default": "ANGLE_BASED" },
          { "name": "margin", "type": "float", "description": "Space between UV islands.", "required": false, "default": 0.001 }
        ],
        "returns": { "type": "dict", "description": "Operator status."},
        "notes": "Requires active object in Edit Mode with faces selected. Relies on marked seams for good results."
      },
      {
        "tool_name": "op_mesh_mark_seam",
        "description": "Mark selected edges as UV seams in Edit Mode.",
        "category": "bpy.ops.mesh",
        "handler_type": "operator_call",
        "blender_operator_path": "bpy.ops.mesh.mark_seam",
        "parameters": [
          {"name": "clear", "type": "bool", "description": "Clear existing seams instead of marking.", "required": false, "default": false}
        ],
        "returns": { "type": "dict", "description": "Operator status."},
        "notes": "Requires active object in Edit Mode with edges selected."
      },
  
      
      {
        "tool_name": "data_materials_new_principled_bsdf",
        "description": "Create a new material with a Principled BSDF shader (version 2 for Blender 4.0+).",
        "category": "bpy.data.materials",
        "handler_type": "custom_blender_function",
        "blender_function_notes": "bpy.data.materials.new(), mat.use_nodes=True, ensures Principled BSDF exists or adds one. Checks for 'Principled BSDF' node.",
        "parameters": [
          { "name": "material_name", "type": "str", "description": "Name for the new material.", "required": true }
        ],
        "returns": { "type": "str", "blender_type": "bpy.types.Material (name)", "description": "Name of the created material." }
      },
      {
        "tool_name": "object_assign_material",
        "description": "Assign a material to an object's material slot.",
        "category": "bpy.types.Object",
        "handler_type": "custom_blender_function",
        "blender_function_notes": "obj.data.materials.append(mat) or obj.material_slots[idx].material = mat. Creates slot if needed.",
        "parameters": [
          { "name": "object_name", "type": "str", "description": "Name of the object.", "required": true },
          { "name": "material_name", "type": "str", "description": "Name of the material to assign.", "required": true },
          { "name": "slot_index", "type": "int", "description": "Material slot index. If -1 or object has no slots, appends. If slot exists, replaces.", "required": false, "default": 0 }
        ],
        "returns": { "type": "None", "description": "None."}
      },
      {
        "tool_name": "data_images_load",
        "description": "Load an image file into Blender as an image data-block.",
        "category": "bpy.data.images",
        "handler_type": "function_call",
        "blender_path": "bpy.data.images.load",
        "parameters": [
          { "name": "filepath", "type": "str", "description": "Path to the image file.", "required": true },
          { "name": "check_existing", "type": "bool", "description": "If true, check if image already loaded and return that instead.", "required": false, "default": false }
        ],
        "returns": { "type": "str", "blender_type": "bpy.types.Image (name)", "description": "Name of the loaded image data-block."}
      },
      {
        "tool_name": "material_principled_bsdf_set_base_color_texture",
        "description": "Set the Base Color of a Principled BSDF material using an image texture.",
        "category": "bpy.types.Material.node_tree",
        "handler_type": "custom_blender_function",
        "blender_function_notes": "Finds Principled BSDF, creates Image Texture node, loads image, links Color output to Base Color input. Sets image texture's color_space appropriately (e.g., 'sRGB' for base color).",
        "parameters": [
          { "name": "material_name", "type": "str", "description": "Name of the material.", "required": true },
          { "name": "image_name_or_filepath", "type": "str", "description": "Name of an existing Blender image data-block or filepath to an image to load.", "required": true },
          { "name": "uv_map_name", "type": "str", "description": "Optional: Name of the UV map to use for Texture Coordinate node. If null, uses active UV map.", "required": false, "default": null }
        ],
        "returns": { "type": "None", "description": "None."}
      },
      {
        "tool_name": "material_principled_bsdf_set_value",
        "description": "Set a scalar or color value on a Principled BSDF (v2 for Blender 4.0+) input socket.",
        "category": "bpy.types.Material.node_tree",
        "handler_type": "custom_blender_function",
        "blender_function_notes": "Finds Principled BSDF, sets default_value of specified input socket.",
        "parameters": [
          { "name": "material_name", "type": "str", "description": "Name of the material.", "required": true },
          { "name": "input_name", "type": "str", "description": "Name of the Principled BSDF input (e.g., 'Base Color', 'Metallic', 'Roughness', 'Specular IOR Level', 'Coat Weight', 'Emission Color').", "required": true },
          { "name": "value", "type": "any", "description": "Value to set (float for scalar, list[float] for color/vector).", "required": true }
        ],
        "returns": { "type": "None", "description": "None."},
        "notes": "For Blender 4.0+ Principled BSDF v2, common inputs include: 'Base Color', 'Subsurface Weight', 'Subsurface Radius', 'Subsurface Scale', 'Subsurface Anisotropy', 'Metallic', 'Roughness', 'Anisotropic', 'Anisotropic Rotation', 'Sheen Weight' (old, now Coat), 'Sheen Roughness' (old, now Coat), 'Coat Weight', 'Coat Roughness', 'Coat IOR', 'Coat Tint', 'Coat Normal', 'Transmission Weight', 'Transmission Color', 'Volume Thickness', 'Volume Density', 'Emission Color', 'Emission Strength', 'Alpha', 'Normal', 'Clearcoat Weight' (old, now Coat), 'Clearcoat Roughness' (old, now Coat), 'Clearcoat Normal' (old, now Coat), 'Tangent', 'Specular IOR Level', 'Specular Tint'."
      },
       {
        "tool_name": "material_principled_bsdf_set_texture_input",
        "description": "Connect an image texture to a specific input of a Principled BSDF material.",
        "category": "bpy.types.Material.node_tree",
        "handler_type": "custom_blender_function",
        "blender_function_notes": "Finds Principled BSDF, creates Image Texture node, loads image, links Color/Alpha output to specified BSDF input. Sets image texture's color_space (e.g., 'Non-Color' for roughness/metallic/normal).",
        "parameters": [
          { "name": "material_name", "type": "str", "description": "Name of the material.", "required": true },
          { "name": "bsdf_input_name", "type": "str", "description": "Name of the Principled BSDF input socket (e.g., 'Roughness', 'Normal', 'Metallic').", "required": true },
          { "name": "image_name_or_filepath", "type": "str", "description": "Name of an existing Blender image or filepath to load.", "required": true },
          { "name": "image_color_space", "type": "str", "description": "Color space for the image texture (e.g., 'sRGB', 'Non-Color', 'Raw').", "required": false, "default": "Non-Color" },
          { "name": "uv_map_name", "type": "str", "description": "Optional: UV map name. If null, uses active.", "required": false, "default": null },
          { "name": "use_alpha_for_texture_output", "type": "bool", "description": "If true, use Alpha output of Image Texture node. Else, use Color output.", "required": false, "default": false},
          { "name": "needs_normal_map_node", "type": "bool", "description": "If true (for 'Normal' input), insert a Normal Map node between texture and BSDF.", "required": false, "default": false}
        ],
        "returns": { "type": "None", "description": "None."}
      },
  
      
      {
        "tool_name": "light_add_point",
        "description": "Add a point light to the scene.",
        "category": "bpy.data.lights",
        "handler_type": "custom_blender_function",
        "blender_function_notes": "bpy.data.lights.new(name, 'POINT'), bpy.data.objects.new(name, light_data), link to scene. Set properties.",
        "parameters": [
          { "name": "name", "type": "str", "description": "Name for the light object.", "required": true },
          { "name": "location", "type": "list[float]", "length": 3, "description": "Location [x,y,z].", "required": false, "default": [0,0,0] },
          { "name": "energy", "type": "float", "description": "Light energy (Watts for Cycles/Eevee).", "required": false, "default": 100.0 }, 
          { "name": "color", "type": "list[float]", "length": 3, "description": "Light color [r,g,b].", "required": false, "default": [1,1,1] },
          { "name": "radius", "type": "float", "description": "Radius of the point light for soft shadows.", "required": false, "default": 0.05 } 
        ],
        "returns": { "type": "str", "blender_type": "bpy.types.Object (name)", "description": "Name of the created light object."}
      },
      
      {
        "tool_name": "light_set_property",
        "description": "Set a property of a light data-block.",
        "category": "bpy.types.Light",
        "handler_type": "custom_blender_function",
        "blender_function_notes": "Finds light object, then its light data-block. Sets property on data-block.",
        "parameters": [
          { "name": "light_object_name", "type": "str", "description": "Name of the light object.", "required": true },
          { "name": "property_name", "type": "str", "description": "Name of the light property (e.g., 'energy', 'color', 'spot_size', 'use_nodes').", "required": true },
          { "name": "value", "type": "any", "description": "Value to set.", "required": true }
        ],
        "returns": { "type": "None", "description": "None."}
      },
  
      
      {
        "tool_name": "camera_add",
        "description": "Add a new camera to the scene.",
        "category": "bpy.data.cameras",
        "handler_type": "custom_blender_function",
        "blender_function_notes": "bpy.data.cameras.new(), bpy.data.objects.new(), link to scene. Set properties.",
        "parameters": [
          { "name": "name", "type": "str", "description": "Name for the camera object.", "required": true },
          { "name": "location", "type": "list[float]", "length": 3, "description": "Location [x,y,z].", "required": false, "default": [0,-7,2] }, 
          { "name": "rotation_euler", "type": "list[float]", "length": 3, "description": "Rotation [x,y,z] in radians.", "required": false, "default": [1.309,0,0] }, 
          { "name": "lens", "type": "float", "description": "Focal length in millimeters.", "required": false, "default": 50.0 },
          { "name": "type", "type": "str", "enum": ["PERSP", "ORTHO", "PANO"], "description": "Camera type.", "required": false, "default": "PERSP" }
        ],
        "returns": { "type": "str", "blender_type": "bpy.types.Object (name)", "description": "Name of the created camera object."}
      },
      {
        "tool_name": "scene_set_active_camera",
        "description": "Set the active camera for the current scene.",
        "category": "bpy.types.Scene",
        "handler_type": "property_set",
        "blender_object_type": "bpy.context.scene",
        "blender_property_name": "camera",
        "parameters": [
          { "name": "camera_object_name", "type": "str", "description": "Name of the camera object to set as active.", "required": true }
        ],
        "returns": { "type": "None", "description": "None." },
        "notes": "Handler needs to fetch bpy.data.objects[camera_object_name] first."
      },
  
      
      {
        "tool_name": "world_set_hdri_environment",
        "description": "Set up the scene's world with an HDRI environment texture.",
        "category": "bpy.types.World.node_tree",
        "handler_type": "custom_blender_function",
        "blender_function_notes": "Ensures world exists, uses nodes. Adds Environment Texture node, links to Background node's Color input. Loads image for Env Texture.",
        "parameters": [
          { "name": "hdri_image_filepath", "type": "str", "description": "Filepath to the HDRI image (.hdr, .exr).", "required": true },
          { "name": "strength", "type": "float", "description": "Strength of the environment light.", "required": false, "default": 1.0 },
          { "name": "world_name", "type": "str", "description": "Optional name for the world data-block.", "required": false, "default": "EnvironmentWorld" }
        ],
        "returns": { "type": "None", "description": "None."}
      },
      {
        "tool_name": "world_set_background_color",
        "description": "Set a simple solid background color for the world (no nodes).",
        "category": "bpy.types.World",
        "handler_type": "custom_blender_function",
        "blender_function_notes": "Ensures world exists, sets world.color. Disables world nodes if active (world.use_nodes = False).",
        "parameters": [
          { "name": "color", "type": "list[float]", "length": 3, "description": "RGB color [r,g,b].", "required": true }
        ],
        "returns": { "type": "None", "description": "None."}
      },
  
      
      {
        "tool_name": "scene_enable_compositor_nodes",
        "description": "Enable 'Use Nodes' for the scene's compositor.",
        "category": "bpy.types.Scene",
        "handler_type": "property_set",
        "blender_object_type": "bpy.context.scene",
        "blender_property_name": "use_nodes",
        "parameters": [
          { "name": "enable", "type": "bool", "description": "True to enable, False to disable.", "required": false, "default": true }
        ],
        "returns": { "type": "None", "description": "None."}
      },
      {
        "tool_name": "compositor_add_node",
        "description": "Add a node to the scene's compositor node tree.",
        "category": "bpy.types.Scene.node_tree",
        "handler_type": "custom_blender_function",
        "blender_function_notes": "scene.node_tree.nodes.new(type=node_type_string)",
        "parameters": [
          { "name": "node_type", "type": "str", "description": "Type of compositor node (e.g., 'CompositorNodeBlur', 'CompositorNodeHueCorrect', 'CompositorNodeOutputFile').", "required": true },
          { "name": "node_name", "type": "str", "description": "Optional custom name for the node.", "required": false }
        ],
        "returns": { "type": "str", "description": "Name of the created node."}
      },
      {
        "tool_name": "compositor_link_nodes",
        "description": "Link two nodes in the scene's compositor node tree.",
        "category": "bpy.types.Scene.node_tree",
        "handler_type": "custom_blender_function",
        "blender_function_notes": "scene.node_tree.links.new(from_node.outputs[output_socket_idx_or_name], to_node.inputs[input_socket_idx_or_name])",
        "parameters": [
          { "name": "from_node_name", "type": "str", "description": "Name of the source node.", "required": true },
          { "name": "from_socket_name_or_index", "type": "any", "description": "Name (str) or index (int) of the output socket on the source node.", "required": true },
          { "name": "to_node_name", "type": "str", "description": "Name of the destination node.", "required": true },
          { "name": "to_socket_name_or_index", "type": "any", "description": "Name (str) or index (int) of the input socket on the destination node.", "required": true }
        ],
        "returns": { "type": "None", "description": "None."}
      },
      {
        "tool_name": "drawing_add_3d_text",
        "description": "Requests to draw text at a 3D world location. Requires a custom draw handler in Blender.",
        "category": "custom_drawing",
        "handler_type": "custom_blender_function",
        "blender_function_notes": "Adds data to a list that a registered Blender draw handler processes.",
        "parameters": [
          { "name": "text_id", "type": "str", "description": "Unique ID for this text element.", "required": true },
          { "name": "text_content", "type": "str", "description": "The text to display.", "required": true },
          { "name": "world_location", "type": "list[float]", "length": 3, "description": "3D world coordinates [x,y,z].", "required": true },
          { "name": "color_rgba", "type": "list[float]", "length": 4, "description": "Text color [r,g,b,a].", "required": false, "default": [1,1,1,1] },
          { "name": "font_size", "type": "int", "description": "Font size.", "required": false, "default": 16 }
        ],
        "returns": { "type": "None", "description": "Request queued." }
      }
    ]
  }